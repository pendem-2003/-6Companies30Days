class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        vector<int> par(n,-1);
        vector<int> dp(n,0);
        dp[0] = 1;
        int maxi = 1;
        int last = 0;
        for (int i=1;i<n;i++){
            int f = 0;
            for (int j=i-1;j>=0;j--){
                if (nums[i]%nums[j]==0){
                    f = 1;
                    if (dp[i]<dp[j]+1){
                        dp[i] = dp[j] + 1;
                        par[i] = j;
                        if (dp[i]>maxi){
                            maxi = dp[i];
                            last = i;
                        }
                    }
                }
            }
            if (f==0)dp[i] = 1;
        }
        vector<int> ans;
        while (par[last] != -1){
            ans.push_back(nums[last]);
            last = par[last];
        }
        ans.push_back(nums[last]);
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
