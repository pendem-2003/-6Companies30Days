/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<TreeNode*,TreeNode*> mp;
    int st;
    TreeNode *head;
    int ans = 0;
    void dfs(TreeNode *root){
        if (root != NULL && root->val == st){
            head = root;
        }
        if (root->left){
            mp[root->left] = root;
            dfs(root->left);
        }
        if (root->right){
            mp[root->right] = root;
            dfs(root->right);
        }
    }
    int dfs1(TreeNode *root, TreeNode *par){
        int cnt = 0;
        if (root->left && root->left != par){
            cnt = max(cnt,1+dfs1(root->left,root));
        }
        if (root->right && root->right != par){
            cnt = max(cnt,1+dfs1(root->right,root));
        }
        if ((mp.find(root) != mp.end()) && mp[root] != par){
            cnt = max(cnt,1+dfs1(mp[root],root));
        }
        return cnt;
    }
    int amountOfTime(TreeNode* root, int start) {
        st = start;
        dfs(root);
        return dfs1(head,head);
    }
};
