class Solution {
public:
    vector<int> primes = {2,3,5,7,11,13,17,19,23,29};
    int n;
    vector<int> arr;
    int dp[1001][1<<11];
    int mod = 1e9+7;
    int check(int x, int mask){
        int val = 0;
        for (int i=0;i<10;i++){
            int cnt = 0;
            while (x%primes[i]==0){
                x /= primes[i];
                cnt++;
            }
            if (cnt>=2)return -1;
            if ((cnt==1))val |= (1<<(i+1));
        }
        return val;
    }
    int rec(int id, int mask){
        //cout<<id<<" "<<mask<<"\n";
        if (id==n)return 1;
        if (dp[id][mask] != -1)return dp[id][mask];
        int val = check(arr[id],mask);
        int ans = rec(id+1, mask);
        if (val != -1 && (mask&val)==0)ans = (ans + rec(id+1,mask|val))%mod;
        return dp[id][mask] = ans;
    }
    int squareFreeSubsets(vector<int>& nums) {
        n = nums.size();
        arr = nums;
        memset(dp,-1,sizeof(dp));
        return ((rec(0,0)-1+mod)%mod);
    }
};
