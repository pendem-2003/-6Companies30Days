class Solution {
public:
    int minimumCost(vector<int>& s, vector<int>& t, vector<vector<int>>& sp) {
        int n = sp.size();
        vector<int> dp(n,INT_MAX);
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        for (int i=0;i<n;i++){
            dp[i] = min(dp[i],abs(s[0]-sp[i][0]) + abs(s[1]-sp[i][1]) + sp[i][4]);
            pq.push({dp[i],i});
        }
        while (!pq.empty()){
            int dist = pq.top().first;
            int id = pq.top().second;
            pq.pop();
            for (int i=0;i<n;i++){
                if (i==id)continue;
                if (dp[i]>(dist + abs(sp[id][2]-sp[i][0]) + abs(sp[id][3]-sp[i][1]) + sp[i][4])){
                    dp[i] = (dist + abs(sp[id][2]-sp[i][0]) + abs(sp[id][3]-sp[i][1]) + sp[i][4]);
                    pq.push({dp[i],i});
                }
            }
        }
        int ans = abs(t[0]-s[0]) + abs(t[1]-s[1]);
        for (int i=0;i<n;i++){
            ans = min(ans,dp[i] + abs(t[0]-sp[i][2]) + abs(t[1]-sp[i][3]));
        }
        return ans;
    }
};
